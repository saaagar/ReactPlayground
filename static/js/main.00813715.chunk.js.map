{"version":3,"sources":["components/movie/Movie.js","components/movies/Movies.js","components/toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","className","movieID","movietitle","type","placeholder","onChange","changeMovieName","moviecountry","genre","onClick","clicked","Movies","removeMovieHandler","index","movies","state","splice","setState","console","log","changeMovieHandler","event","id","movieIndex","findIndex","mov","movie","movieTitle","target","value","myMovie","movieCountry","this","map","key","Component","Toolbar","btnStyle","backgroundColor","color","padding","dispStatus","style","App","toggleHandler","isShown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAgBeA,G,MAbH,SAACC,GACZ,OACE,yBAAKC,UAAU,aACf,2BAAID,EAAME,SACT,0CAAgBF,EAAMG,YACtB,2BAAOC,KAAK,OAAOC,YAAY,aAAaC,SAAUN,EAAMO,kBAC5D,uCAAaP,EAAMQ,cACnB,qCAAWR,EAAMS,OACjB,4BAAQC,QAASV,EAAMW,QAASV,UAAU,UAA1C,wBC+BWW,E,YAtCb,WAAYZ,GAAO,IAAD,8BAChB,4CAAMA,KAQRa,mBAAmB,SAACC,GAClB,IAAMC,EAAO,YAAI,EAAKC,MAAMD,QAC5BA,EAAOE,OAAOH,EAAM,GACpB,EAAKI,SAAS,CAACH,OAAOA,IACtBI,QAAQC,IAAI,2BAA2BN,IAbvB,EAelBO,mBAAmB,SAACC,EAAMC,GACxB,IAAMC,EAAW,EAAKR,MAAMD,OAAOU,WAAU,SAAAC,GAC3C,OAAOA,EAAIH,KAAKA,KAEZI,EAAM,eAAI,EAAKX,MAAMD,OAAOS,IAClCG,EAAMC,WAAWN,EAAMO,OAAOC,MAC9B,IAAMC,EAAQ,YAAI,EAAKf,MAAMD,QAC7BgB,EAAQP,GAAYG,EAEpB,EAAKT,SAAS,CAACH,OAAOgB,KAtBtB,EAAKf,MAAM,CAACD,OAAO,CACjB,CAACQ,GAAG,MAAOK,WAAW,oBAAqBI,aAAa,KAAMvB,MAAM,iBACpE,CAACc,GAAG,MAAOK,WAAW,aAAcI,aAAa,QAASvB,MAAM,UAChE,CAACc,GAAG,MAAOK,WAAW,WAAYI,aAAa,QAASvB,MAAM,iBAC9D,CAACc,GAAG,MAAOK,WAAW,kBAAmBI,aAAa,cAAevB,MAAM,YAN7D,E,sEA2BT,IAAD,OACN,OACE,6BACCwB,KAAKjB,MAAMD,OAAOmB,KAAI,SAACP,EAAMb,GAC5B,OAAO,kBAAC,EAAD,CAAOZ,QAASyB,EAAMJ,GAAIpB,WAAYwB,EAAMC,WAAYpB,aAAcmB,EAAMK,aAAcvB,MAAOkB,EAAMlB,MAAOE,QAAS,kBAAI,EAAKE,mBAAmBC,IAAQP,gBAAiB,SAACe,GAAD,OAAS,EAAKD,mBAAmBC,EAAMK,EAAMJ,KAAKY,IAAKR,EAAMJ,a,GAhCnOa,aCgBNC,G,MAhBD,SAACrC,GACf,IAAMsC,EAAS,CACbC,gBAAgB,UAChBC,MAAM,QACNC,QAAQ,OAKR,OAHoB,IAAnBzC,EAAM0C,aACPJ,EAASC,gBAAgB,WAGvB,yBAAKtC,UAAU,WACb,4BAAQ0C,MAAOL,EAAU5B,QAASV,EAAMW,QAASV,UAAU,UAA3D,oBCcS2C,G,kBAtBb,WAAY5C,GAAO,IAAD,8BAChB,4CAAMA,KAGV6C,cAAc,WACb,IAAMC,EAAQ,EAAK9B,MAAM0B,WACzB,EAAKxB,SAAS,CAACwB,YAAYI,KAJxB,EAAK9B,MAAM,CAAC0B,YAAW,GAFP,E,sEAShB,IAAI3B,EAAO,KAIX,OAHGkB,KAAKjB,MAAM0B,aACZ3B,EAAQ,kBAAC,EAAD,OAGR,6BACA,kBAAC,EAAD,CAASJ,QAASsB,KAAKY,cAAeH,WAAYT,KAAKjB,MAAM0B,aAC5D3B,O,GAjBWqB,cCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.00813715.chunk.js","sourcesContent":["import React from 'react';\r\nimport './movie.css';\r\n\r\nconst Movie=(props)=>{\r\n return(\r\n   <div className=\"movieCard\">\r\n   <p>{props.movieID}</p>\r\n    <p>Movie Name: {props.movietitle}</p>\r\n    <input type=\"text\" placeholder=\"Movie Name\" onChange={props.changeMovieName}/>\r\n    <p>Country: {props.moviecountry}</p>\r\n    <p>Genre: {props.genre}</p>\r\n    <button onClick={props.clicked} className=\"Button\">Remove this Movie</button>\r\n   </div>\r\n );\r\n}\r\n\r\nexport default Movie;\r\n","import React,{Component} from 'react';\r\nimport Movie from '../movie/Movie';\r\n\r\nclass Movies extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={movies:[\r\n      {id:'M-1', movieTitle:'Avengers:End Game', movieCountry:'US', genre:'Si-Fy, Action'},\r\n      {id:'M-2', movieTitle:'Woda No. 6', movieCountry:'Nepal', genre:'Comedy'},\r\n      {id:'M-3', movieTitle:'3 Idiots', movieCountry:'India', genre:'Comedy, Drama'},\r\n      {id:'M-4', movieTitle:'Train to Bushan', movieCountry:'South Korea', genre:'Horror'}\r\n    ]}\r\n  }\r\n  removeMovieHandler=(index)=>{\r\n    const movies=[...this.state.movies];\r\n    movies.splice(index,1);\r\n    this.setState({movies:movies})\r\n    console.log('Movie index is  removed '+index);\r\n  }\r\n  changeMovieHandler=(event,id)=>{\r\n    const movieIndex=this.state.movies.findIndex(mov=>{\r\n      return mov.id===id;\r\n    });\r\n    const movie={...this.state.movies[movieIndex]};\r\n    movie.movieTitle=event.target.value;\r\n    const myMovie=[...this.state.movies];\r\n    myMovie[movieIndex]=movie;\r\n\r\n    this.setState({movies:myMovie});\r\n\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n      {this.state.movies.map((movie,index)=>{\r\n        return(<Movie movieID={movie.id} movietitle={movie.movieTitle} moviecountry={movie.movieCountry} genre={movie.genre} clicked={()=>this.removeMovieHandler(index)} changeMovieName={(event)=>this.changeMovieHandler(event,movie.id)} key={movie.id}/>);\r\n      })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movies;\r\n","import React from 'react';\r\nimport './Toolbar.css';\r\n\r\nconst Toolbar=(props)=>{\r\nconst btnStyle={\r\n  backgroundColor:\"#28A745\",\r\n  color:'white',\r\n  padding:'5px'\r\n}\r\nif(props.dispStatus===false){\r\n  btnStyle.backgroundColor='#DC3545';\r\n}\r\n  return(\r\n    <div className=\"Toolbar\">\r\n      <button style={btnStyle} onClick={props.clicked} className=\"Button\">Toggle Movies</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Toolbar;\r\n","import React,{Component} from 'react';\nimport Movies from './components/movies/Movies';\nimport Toolbar from './components/toolbar/Toolbar';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={dispStatus:true}\n  }\ntoggleHandler=()=>{\n const isShown=this.state.dispStatus;\n this.setState({dispStatus:!isShown});\n}\n  render(){\n    let movies=null;\n    if(this.state.dispStatus){\n      movies=(<Movies/>);\n    }\n    return (\n      <div>\n      <Toolbar clicked={this.toggleHandler} dispStatus={this.state.dispStatus}/>\n      {movies}\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}