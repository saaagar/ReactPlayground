{"version":3,"sources":["components/movie/Movie.js","components/movies/Movies.js","components/toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","className","movietitle","moviecountry","genre","onClick","clicked","Movies","removeMovieHandler","index","movies","state","splice","setState","console","log","movieTitle","movieCountry","this","map","movie","key","Component","Toolbar","btnStyle","backgroundColor","color","padding","dispStatus","style","App","toggleHandler","isShown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAceA,G,MAXH,SAACC,GACZ,OACE,yBAAKC,UAAU,aACd,0CAAgBD,EAAME,YACtB,uCAAaF,EAAMG,cACnB,qCAAWH,EAAMI,OACjB,4BAAQC,QAASL,EAAMM,QAASL,UAAU,UAA1C,wBCqBWM,E,YA1Bb,WAAYP,GAAO,IAAD,8BAChB,4CAAMA,KAQRQ,mBAAmB,SAACC,GAClB,IAAMC,EAAO,EAAKC,MAAMD,OACxBA,EAAOE,OAAOH,EAAM,GACpB,EAAKI,SAAS,CAACH,OAAOA,IACtBI,QAAQC,IAAI,0BAA0BN,IAXtC,EAAKE,MAAM,CAACD,OAAO,CACjB,CAACM,WAAW,oBAAqBC,aAAa,KAAMb,MAAM,iBAC1D,CAACY,WAAW,aAAcC,aAAa,QAASb,MAAM,UACtD,CAACY,WAAW,WAAYC,aAAa,QAASb,MAAM,iBACpD,CAACY,WAAW,kBAAmBC,aAAa,cAAeb,MAAM,YANnD,E,sEAeT,IAAD,OACN,OACE,6BACCc,KAAKP,MAAMD,OAAOS,KAAI,SAACC,EAAOX,GAC7B,OAAO,kBAAC,EAAD,CAAOP,WAAYkB,EAAMJ,WAAYb,aAAciB,EAAMjB,aAAcC,MAAOgB,EAAMhB,MAAOE,QAAS,kBAAI,EAAKE,mBAAmBC,IAAQY,IAAKZ,Y,GApBvIa,aCgBNC,G,MAhBD,SAACvB,GACf,IAAMwB,EAAS,CACbC,gBAAgB,UAChBC,MAAM,QACNC,QAAQ,OAKR,OAHoB,IAAnB3B,EAAM4B,aACPJ,EAASC,gBAAgB,WAGvB,yBAAKxB,UAAU,WACb,4BAAQ4B,MAAOL,EAAUnB,QAASL,EAAMM,QAASL,UAAU,UAA3D,oBCcS6B,G,kBAtBb,WAAY9B,GAAO,IAAD,8BAChB,4CAAMA,KAGV+B,cAAc,WACb,IAAMC,EAAQ,EAAKrB,MAAMiB,WACzB,EAAKf,SAAS,CAACe,YAAYI,KAJxB,EAAKrB,MAAM,CAACiB,YAAW,GAFP,E,sEAShB,IAAIlB,EAAO,KAIX,OAHGQ,KAAKP,MAAMiB,aACZlB,EAAQ,kBAAC,EAAD,OAGR,6BACA,kBAAC,EAAD,CAASJ,QAASY,KAAKa,cAAeH,WAAYV,KAAKP,MAAMiB,aAC5DlB,O,GAjBWY,cCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f2c48565.chunk.js","sourcesContent":["import React from 'react';\r\nimport './movie.css';\r\n\r\nconst Movie=(props)=>{\r\n return(\r\n   <div className=\"movieCard\">\r\n    <p>Movie Name: {props.movietitle}</p>\r\n    <p>Country: {props.moviecountry}</p>\r\n    <p>Genre: {props.genre}</p>\r\n    <button onClick={props.clicked} className=\"Button\">Remove this Movie</button>\r\n   </div>\r\n );\r\n}\r\n\r\nexport default Movie;\r\n","import React,{Component} from 'react';\r\nimport Movie from '../movie/Movie';\r\n\r\nclass Movies extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={movies:[\r\n      {movieTitle:'Avengers:End Game', movieCountry:'US', genre:'Si-Fy, Action'},\r\n      {movieTitle:'Woda No. 6', movieCountry:'Nepal', genre:'Comedy'},\r\n      {movieTitle:'3 Idiots', movieCountry:'India', genre:'Comedy, Drama'},\r\n      {movieTitle:'Train to Bushan', movieCountry:'South Korea', genre:'Horror'}\r\n    ]}\r\n  }\r\n  removeMovieHandler=(index)=>{\r\n    const movies=this.state.movies;\r\n    movies.splice(index,1);\r\n    this.setState({movies:movies})\r\n    console.log('Movie index is  removed'+index);\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n      {this.state.movies.map((movie, index)=>{\r\n        return(<Movie movietitle={movie.movieTitle} moviecountry={movie.moviecountry} genre={movie.genre} clicked={()=>this.removeMovieHandler(index)} key={index}/>);\r\n      })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movies;\r\n","import React from 'react';\r\nimport './Toolbar.css';\r\n\r\nconst Toolbar=(props)=>{\r\nconst btnStyle={\r\n  backgroundColor:\"#28A745\",\r\n  color:'white',\r\n  padding:'5px'\r\n}\r\nif(props.dispStatus===false){\r\n  btnStyle.backgroundColor='#DC3545';\r\n}\r\n  return(\r\n    <div className=\"Toolbar\">\r\n      <button style={btnStyle} onClick={props.clicked} className=\"Button\">Toggle Movies</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Toolbar;\r\n","import React,{Component} from 'react';\nimport Movies from './components/movies/Movies';\nimport Toolbar from './components/toolbar/Toolbar';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={dispStatus:true}\n  }\ntoggleHandler=()=>{\n const isShown=this.state.dispStatus;\n this.setState({dispStatus:!isShown});\n}\n  render(){\n    let movies=null;\n    if(this.state.dispStatus){\n      movies=(<Movies/>);\n    }\n    return (\n      <div>\n      <Toolbar clicked={this.toggleHandler} dispStatus={this.state.dispStatus}/>\n      {movies}\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}